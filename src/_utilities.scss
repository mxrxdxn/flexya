@use "sass:map";

// Breakpoint columns
@each $size, $options in $breakpoints {
    @if map.get($options, min-width) > 0 {
        @include breakpoint-up($size) {
            @each $utility, $utilityOptions in $utilities {
                $prefix:          map.get($options, prefix);
                $properties:      map.get($utilityOptions, property);
                $importantOption: map.get($utilityOptions, important);
                $important:       null;

                @if $importantOption == true {
                    $important: !important;
                }

                @if type-of($properties) == "string" {
                    $properties: append((), $properties);
                }

                $className: if(map-has-key($utilityOptions, class), map.get($utilityOptions, class), nth($properties, 1));

                $values: map-get($utilityOptions, values);

                @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
                    $values: zip($values, $values);
                }

                @each $classSuffix, $value in $values {
                    .#{$className}-#{$prefix}-#{$classSuffix} {
                        @each $property in $properties {
                            #{$property}: $value$important;
                        }
                    }
                }
            }
        }
    } @else {
        @each $utility, $utilityOptions in $utilities {
            $properties:      map.get($utilityOptions, property);
            $importantOption: map.get($utilityOptions, important);
            $important:       null;

            @if $importantOption == true {
                $important: !important;
            }

            @if type-of($properties) == "string" {
                $properties: append((), $properties);
            }

            $className: if(map-has-key($utilityOptions, class), map.get($utilityOptions, class), nth($properties, 1));

            $values: map-get($utilityOptions, values);

            @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
                $values: zip($values, $values);
            }

            @each $classSuffix, $value in $values {
                .#{$className}-#{$classSuffix} {
                    @each $property in $properties {
                        #{$property}: $value$important;
                    }
                }
            }
        }
    }
}
