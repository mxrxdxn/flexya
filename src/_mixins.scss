@use "sass:list";
@use "sass:map";
@use "sass:math";

// Styles in this mixin will only apply for the given breakpoint and above.
@mixin breakpoint-up($name: "mobile", $mode: false) {
    $min: breakpoint-min($name);

    @if $min {
        @media (min-width: $min) {
            @if $mode == "touch" {
                @media (hover: none) and (pointer: coarse) {
                    @content;
                }
            } @else if $mode == "notouch" {
                @media (hover: hover) and (pointer: fine) {
                    @content;
                }
            } @else {
                @content;
            }
        }
    } @else {
        @content;
    }
}

// Styles in this mixin will only apply for the given breakpoint and below.
@mixin breakpoint-down($name: "large-desktop", $mode: false) {
    $max: breakpoint-max($name);

    @if $max {
        @media (max-width: $max) {
            @if $mode == "touch" {
                @media (hover: none) and (pointer: coarse) {
                    @content;
                }
            } @else if $mode == "notouch" {
                @media (hover: hover) and (pointer: fine) {
                    @content;
                }
            } @else {
                @content;
            }
        }
    } @else {
        @content;
    }
}

// Styles in this mixin will only apply for the given breakpoint.
@mixin breakpoint-only($name: "mobile", $mode: false) {
    $min:  breakpoint-min($name);
    $next: breakpoint-next($name);
    $max:  breakpoint-max($next);

    @if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
            @if $mode == "touch" {
                @media (hover: none) and (pointer: coarse) {
                    @content;
                }
            } @else if $mode == "notouch" {
                @media (hover: hover) and (pointer: fine) {
                    @content;
                }
            } @else {
                @content;
            }
        }
    } @else if $max == null {
        @include breakpoint-up($name, $mode) {
            @content;
        }
    } @else if $min == null {
        @include breakpoint-down($next, $mode) {
            @content;
        }
    }
}

// Styles in this mixin will only apply between the given lower and upper breakpoints.
@mixin breakpoint-between($lower, $upper, $mode: false) {
    $min: breakpoint-min($lower);
    $max: breakpoint-max($upper);

    @if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
            @if $mode == "touch" {
                @media (hover: none) and (pointer: coarse) {
                    @content;
                }
            } @else if $mode == "notouch" {
                @media (hover: hover) and (pointer: fine) {
                    @content;
                }
            } @else {
                @content;
            }
        }
    } @else if $max == null {
        @include breakpoint-up($lower, $mode) {
            @content;
        }
    } @else if $min == null {
        @include breakpoint-down($upper, $mode) {
            @content;
        }
    }
}

@mixin generate-column-classes($options) {
    $prefix: map.get($options, "prefix");

    @if $prefix == false {
        $prefix: "";
    } @else {
        $prefix: "-#{$prefix}";
    }

    // Auto column
    .#{$columnClass}#{$prefix} {
        flex: 1 0 0%;
    }

    // Auto-size column
    .#{$columnClass}#{$prefix}-auto {
        flex:  0 0 auto;
        width: auto;
    }

    // Sized columns
    @for $i from 1 through $columnCount {
        $width: math.div(100%, $columnCount) * $i;

        .#{$columnClass}#{$prefix}-#{$i} {
            flex:  0 0 auto;
            width: $width;
        }

        .#{$offsetClass}#{$prefix}-#{$i} {
            margin-left: $width;
        }
    }
}

@mixin generate-grid-column-classes($options) {
    $prefix: map.get($options, "prefix");

    @if $prefix == false {
        $prefix: "";
    } @else {
        $prefix: "-#{$prefix}";
    }

    // Sized columns
    @for $i from 1 through $columnCount {
        $width: math.div(100%, $columnCount) * $i;

        .#{$columnClass}#{$prefix}-#{$i} {
            grid-column: span #{$i};
        }
    }
}

@mixin generate-order-classes($options) {
    $prefix: map.get($options, "prefix");

    @if $prefix == false {
        $prefix: "";
    } @else {
        $prefix: "-#{$prefix}";
    }

    // Orders
    @for $i from 1 through $columnCount {
        $width: math.div(100%, $columnCount) * $i;

        .#{$orderClass}#{$prefix}-#{$i} {
            order: $i;
        }
    }
}
